{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e7992a2a",
   "metadata": {},
   "source": [
    "# LP Example: Production Optimization\n",
    "\n",
    "This tutorial illustrates how to model and solve a real-world linear programming (LP) problem using the **OptArrow** optimization engine. The example is based on a classic production optimization problem where multiple products must be manufactured using limited resources to **maximize profit** while respecting **resource**, **demand**, and **capacity** constraints."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dab963c0",
   "metadata": {},
   "source": [
    "## Problem Overview\n",
    "\n",
    "A factory has a limited stock of raw materials:\n",
    "\n",
    "- 200 units of **Raw Material A**\n",
    "- 120 units of **Raw Material B**\n",
    "- 150 units of **Raw Material C**\n",
    "\n",
    "The factory produces two types of products: **Product X** and **Product Y**.\n",
    "\n",
    "| Resource Usage      | Product X | Product Y |\n",
    "|---------------------|-----------|-----------|\n",
    "| Material A (units)  | 20        | 10        |\n",
    "| Material B (units)  | 10        | 20        |\n",
    "| Material C (units)  | 10        | 30        |\n",
    "| **Profit per unit** | $5        | $12       |"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5dce1d8",
   "metadata": {},
   "source": [
    "## Mathematical Formulation\n",
    "The LP problem can be formulated as follows:\n",
    "\n",
    "**Objective**: \n",
    "Maximize profit\n",
    "\n",
    "$$ Z = 5x + 12y $$\n",
    "\n",
    "where $x$ is the number of Product X produced and $y$ is the number of Product Y produced.\n",
    "**Subject to**:\n",
    "\n",
    "$$\n",
    "\\begin{aligned}\n",
    "20x + 10y &\\leq 200 \\quad &\\text{(Material A constraint)} \\\\\n",
    "10x + 20y &\\leq 120 \\quad &\\text{(Material B constraint)} \\\\\n",
    "10x + 30y &\\leq 150 \\quad &\\text{(Material C constraint)} \\\\\n",
    "x, y &\\geq 0 \\quad &\\text{(Non-negativity constraints)}\n",
    "\\end{aligned}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fabd8040",
   "metadata": {},
   "source": [
    "## General LP Formulation\n",
    "The LP problem should be structured as:\n",
    "\n",
    "**Objective**: Maximize $c^T x$\n",
    "where $c$ is the profit vector and $x$ is the production vector.\n",
    "\n",
    "**Subject to**:\n",
    "\n",
    "$$Ax = b; \\quad lb \\leq x \\leq ub$$\n",
    "\n",
    "where $A$ is the resource usage matrix, $b$ is the resource availability vector, and $lb$, $ub$ are the lower and upper bounds on the production quantities.\n",
    "\n",
    "\n",
    "$$\n",
    "c =\n",
    "\\begin{bmatrix}\n",
    "5 \\\\\n",
    "12\n",
    "\\end{bmatrix},\n",
    "\\quad\n",
    "x =\n",
    "\\begin{bmatrix}\n",
    "x \\\\\n",
    "y\n",
    "\\end{bmatrix},\n",
    "\\quad\n",
    "A =\n",
    "\\begin{bmatrix}\n",
    "20 & 10 \\\\\n",
    "10 & 20 \\\\\n",
    "10 & 30\n",
    "\\end{bmatrix},\n",
    "\\quad\n",
    "b =\n",
    "\\begin{bmatrix}\n",
    "200 \\\\\n",
    "120 \\\\\n",
    "150\n",
    "\\end{bmatrix}\n",
    "\\quad\n",
    "lb =\n",
    "\\begin{bmatrix}\n",
    "0 \\\\\n",
    "0\n",
    "\\end{bmatrix}\n",
    "$$\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98bdb3c8",
   "metadata": {},
   "source": [
    "## Solving with OptArrow\n",
    "\n",
    "The following code illustrates how this linear program can be defined and solved using **OptArrow** in Python:\n",
    "\n",
    "A is the matrix in Coordinate(COO) format, which is a sparse matrix format suitable for large matrices. The `row`, `col`, and `val` lists represent the non-zero entries of the matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "8c12c1fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "ipc_dict = {\n",
    "  \"model\": {\n",
    "    \"A\": {\n",
    "      \"row\": [0, 0, 1, 1, 2, 2],\n",
    "      \"col\": [0, 1, 0, 1, 0, 1],\n",
    "      \"val\": [20, 10, 10, 20, 10, 30]\n",
    "    },\n",
    "    \"b\": [200, 120, 150],\n",
    "    \"c\": [5, 12],\n",
    "    \"lb\": [0, 0],\n",
    "    \"csense\": [\"L\", \"L\", \"L\"], # 'L' for less than or equal to constraints\n",
    "    \"osense\": \"max\"\n",
    "  },\n",
    "  \"model_name\": \"product_mix_lp\",\n",
    "  \"engine\": \"julia\", # Using Julia as the optimization engine, also supports Python\n",
    "  \"solver\": {\n",
    "    \"solver_name\": \"HiGHS\", # Using HiGHS solver for LP problems, also supports other solvers\n",
    "    \"solver_type\": \"LP\", # Specify the solver type as LP\n",
    "    \"solver_params\": {} # Additional solver parameters can be added here\n",
    "  }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61db7918",
   "metadata": {},
   "source": [
    "### Using Arrow IPC Stream Bytes Format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "30e28327",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'success': [True], 'status': ['OPTIMAL'], 'obj_val': [66.0], 'solution': [[6.000000000000004, 2.9999999999999987]]}\n"
     ]
    }
   ],
   "source": [
    "import pyarrow as pa\n",
    "import requests\n",
    "\n",
    "# Convert the dictionary to an Arrow table for IPC serialization\n",
    "pa_arrays = [pa.array([v]) for v in ipc_dict.values()]\n",
    "table = pa.Table.from_arrays(pa_arrays, names=list(ipc_dict.keys()))\n",
    "\n",
    "# Serialize the table to IPC stream bytes\n",
    "sink = pa.BufferOutputStream()\n",
    "with pa.ipc.new_stream(sink, table.schema) as writer:\n",
    "    writer.write(table)\n",
    "ipc_bytes = sink.getvalue().to_pybytes()\n",
    "\n",
    "# Send the IPC stream bytes to the server\n",
    "headers = {\"Content-Type\": \"application/vnd.apache.arrow.stream\"}\n",
    "response = requests.post(\"http://localhost:8000/compute\", data=ipc_bytes, headers=headers)\n",
    "\n",
    "# Check if the response is successful\n",
    "if response.status_code != 200:\n",
    "    print(f\"Error: {response.status_code} - {response.text}\")\n",
    "# response is ipc stream\n",
    "reader = pa.ipc.open_stream(response.content)\n",
    "result_table = reader.read_all()\n",
    "result_dict = {name: result_table.column(name).to_pylist() for name in result_table.column_names}\n",
    "print(result_dict)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b431c20f",
   "metadata": {},
   "source": [
    "### Using JSON "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "e18184f8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'success': True, 'status': 'OPTIMAL', 'obj_val': 66.0, 'solution': [6.000000000000004, 2.9999999999999987]}\n"
     ]
    }
   ],
   "source": [
    "headers = {\"Content-Type\": \"application/json\"}\n",
    "response = requests.post(\"http://localhost:8000/computeJSON\", json=ipc_dict, headers=headers)\n",
    "print(response.json())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
