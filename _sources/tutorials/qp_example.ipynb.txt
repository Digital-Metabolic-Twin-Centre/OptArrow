{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "83a7d512",
   "metadata": {},
   "source": [
    "# QP Example\n",
    "\n",
    "Consider solving the following **Quadratic Programming (QP)** problem:\n",
    "\n",
    "### Objective:\n",
    "\n",
    "Minimize the quadratic function:\n",
    "\n",
    "$$\n",
    "z = x_1 - 2x_2 + 4x_3 + x_1^2 + 2x_2^2 + 3x_3^2 + x_1 x_3\n",
    "$$\n",
    "\n",
    "### Subject to constraints:\n",
    "\n",
    "$$\n",
    "\\begin{aligned}\n",
    "3x_1 + 4x_2 - 2x_3 &\\leq 10 \\\\\n",
    "-3x_1 + 2x_2 + x_3 &\\geq 2 \\\\\n",
    "2x_1 + 3x_2 + 4x_3 &= 5 \\\\\n",
    "0 \\leq x_1 &\\leq 5 \\\\\n",
    "1 \\leq x_2 &\\leq 5 \\\\\n",
    "0 \\leq x_3 &\\leq 5\n",
    "\\end{aligned}\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52450428",
   "metadata": {},
   "source": [
    "## General QP Formulation\n",
    "\n",
    "The general form of a Quadratic Programming (QP) problem can be expressed as:\n",
    "\n",
    "**Objective**: Minimize\n",
    "\n",
    "$$\n",
    "\\frac{1}{2} x^T Q x + c^T x\n",
    "$$\n",
    "\n",
    "**Subject to**:\n",
    "\n",
    "$$\n",
    "Ax = b,\n",
    "\n",
    "Gx \\leq h,\n",
    "\n",
    "lb \\leq x \\leq ub\n",
    "$$\n",
    "\n",
    "So:\n",
    "\n",
    "$$\n",
    "x = \\begin{bmatrix}\n",
    "x_1 \\\\\n",
    "x_2 \\\\\n",
    "x_3\n",
    "\\end{bmatrix},\n",
    "\\quad\n",
    "Q = \\begin{bmatrix}\n",
    "2 & 0 & 1 \\\\\n",
    "0 & 4 & 0 \\\\\n",
    "1 & 0 & 6\n",
    "\\end{bmatrix},\n",
    "\\quad\n",
    "c = \\begin{bmatrix}\n",
    "1 \\\\\n",
    "-2 \\\\\n",
    "4\n",
    "\\end{bmatrix}\n",
    "$$\n",
    "\n",
    "$$\n",
    "A = \\begin{bmatrix}\n",
    "2 & 3 & 4\n",
    "\\end{bmatrix},\n",
    "\\quad\n",
    "b = \\begin{bmatrix}\n",
    "5\n",
    "\\end{bmatrix}\n",
    "$$\n",
    "\n",
    "$$\n",
    "G = \\begin{bmatrix}\n",
    "3 & 4 & -2 \\\\\n",
    "3 & -2 & -1\n",
    "\\end{bmatrix},\n",
    "h = \\begin{bmatrix}\n",
    "10 \\\\\n",
    "-2\n",
    "\\end{bmatrix}\n",
    "$$\n",
    "\n",
    "$$\n",
    "lb = \\begin{bmatrix}\n",
    "0 \\\\\n",
    "1 \\\\\n",
    "0\n",
    "\\end{bmatrix},\n",
    "ub = \\begin{bmatrix}\n",
    "5 \\\\\n",
    "5 \\\\\n",
    "5\n",
    "\\end{bmatrix}\n",
    "$$\n",
    "\n",
    "where:\n",
    "- $Q$ is a symmetric matrix representing the quadratic coefficients.\n",
    "- $c$ is a vector representing the linear coefficients.\n",
    "- $A$, $G$, $lb$, and $ub$ are defined as per the problem constraints."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6bfa8c88",
   "metadata": {},
   "outputs": [],
   "source": [
    "ipc_dict = {\n",
    "    \"model\": {\n",
    "        \"Q\": {\n",
    "            \"row\": [0, 0, 2, 1, 2],\n",
    "            \"col\": [0, 2, 0, 1, 2],\n",
    "            \"val\": [2, 1, 1, 4, 6]\n",
    "        },\n",
    "        \"c\": [1, -2, 4],\n",
    "        \"A\": {\n",
    "            \"row\": [0, 0, 0],\n",
    "            \"col\": [0, 1, 2],\n",
    "            \"val\": [2, 3, 4]\n",
    "        },\n",
    "        \"b\": [5],\n",
    "        \"G\": {\n",
    "            \"row\": [0, 0, 0, 1, 1, 1],\n",
    "            \"col\": [0, 1, 2, 0, 1, 2],\n",
    "            \"val\": [3, 4, -2, 3, -2, -1]\n",
    "        },\n",
    "        \"h\": [10, -2],\n",
    "        \"lb\": [0, 1, 0],\n",
    "        \"ub\": [5, 5, 5],\n",
    "        \"osense\": \"min\"\n",
    "    },\n",
    "    \"model_name\": \"QP-tutorial\",\n",
    "    \"engine\": \"julia\",\n",
    "    \"solver\": {\n",
    "        \"solver_name\": \"HiGHS\",\n",
    "        \"solver_type\": \"QP\",\n",
    "        \"solver_params\": {}\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "36853c72",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'success': [True], 'status': ['OPTIMAL'], 'obj_val': [1.7412689173457534], 'solution': [[0.2904540102865504, 1.4132712288023412, 0.04481957325496911]]}\n"
     ]
    }
   ],
   "source": [
    "import pyarrow as pa\n",
    "import requests\n",
    "\n",
    "# Convert the dictionary to an Arrow table for IPC serialization\n",
    "pa_arrays = [pa.array([v]) for v in ipc_dict.values()]\n",
    "table = pa.Table.from_arrays(pa_arrays, names=list(ipc_dict.keys()))\n",
    "\n",
    "# Serialize the table to IPC stream bytes\n",
    "sink = pa.BufferOutputStream()\n",
    "with pa.ipc.new_stream(sink, table.schema) as writer:\n",
    "    writer.write(table)\n",
    "ipc_bytes = sink.getvalue().to_pybytes()\n",
    "\n",
    "# Send the IPC stream bytes to the server\n",
    "headers = {\"Content-Type\": \"application/vnd.apache.arrow.stream\"}\n",
    "response = requests.post(\"http://localhost:8000/compute\", data=ipc_bytes, headers=headers)\n",
    "\n",
    "# Check if the response is successful\n",
    "if response.status_code != 200:\n",
    "    print(f\"Error: {response.status_code} - {response.text}\")\n",
    "# response is ipc stream\n",
    "reader = pa.ipc.open_stream(response.content)\n",
    "result_table = reader.read_all()\n",
    "result_dict = {name: result_table.column(name).to_pylist() for name in result_table.column_names}\n",
    "print(result_dict)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "adc7ddf3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'success': True, 'status': 'OPTIMAL', 'obj_val': 1.7412689173457534, 'solution': [0.2904540102865504, 1.4132712288023412, 0.04481957325496911]}\n"
     ]
    }
   ],
   "source": [
    "headers = {\"Content-Type\": \"application/json\"}\n",
    "response = requests.post(\"http://localhost:8000/computeJSON\", json=ipc_dict, headers=headers)\n",
    "print(response.json())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
